[{"content":"背景 我校的操作系统课程设计是斯坦福大学的 pintos 项目（当然只需要完成少量的 project）。pintos 需要在 x86 架构的 Linux 系统上运行，但是我最近主力使用的是一台 Macbook Pro，我不太愿意每天背着两台电脑去图书馆。\n我原本的设想是把我运行 Ubuntu 机器放在宿舍，通过校园网 ssh 连接到它。但是这样做有两个问题：\n校园网的网络环境不太好，即使是使用代理也无法保证一些软件源的稳定连接。 学校最近在进行消防安全检查，不允许离开宿舍时不断电源，而我没法保证宿舍时刻都有人。 看起来，我只能在 Mac 上跑一个虚拟机了；然而我不太喜欢使用虚拟机的使用体验：在运行时占用太多的内存，启动或者关闭需要等待太长的时间。我希望有一个更轻量的解决方案。\n最近，我关注的 up 主 @TheCW 在沉寂了一年之后忽然更新了一个视频。我重新回看了他之前发布的几个视频后，忽然发现他在 Mac 上需要一个 Linux 环境时，直接用 docker run 了一个全新的 Ubuntu 镜像，这个方法看起来非常轻巧——非常适合我。\n下文是我在 Mac 上使用 docker 运行 Ubuntu 的步骤。\n安装 Docker Desktop for Mac 访问 Docker 官网 下载 Docker Desktop for Mac 即可，这部分不再赘述。\n下载并运行 Ubuntu 镜像 在终端中输入以下命令来拉取 Ubuntu 镜像：\n1 docker pull --platform linux/amd64 ubuntu 我使用 \u0026ndash;platform 来指定镜像的架构，因为我需要一个 x86 架构的镜像；如果直接使用 docker pull ubuntu，docker 会默认自动选择当前机器的架构，这对我来说当然是不行的。\n拉取完成后，运行以下命令来启动一个新的 Ubuntu 容器：\n1 docker run --platform linux/amd64 -it ubuntu /bin/bash 这个命令会启动一个新的 Ubuntu 容器，并且进入 bash shell。不过，这个容器还是一个全新的、仅包含最基本软件的 Ubuntu 系统，它看起来应该是这样的：\n1 2 wood@Woods-MacBook-Pro ~\u0026gt; docker exec -it ubuntu bash root@8d907eeb-----:/# 如果需要退出容器，使用 exit 命令。\n如果要重新进入容器，可以使用 docker ps -a 查看容器的 ID，然后使用 docker start \u0026lt;container-id\u0026gt; 和 docker attach \u0026lt;container-id\u0026gt; 命令。\n我们首先应该要新建一个用户，因为 root 用户不应该用于日常操作。在容器中依次以下命令：\n1 2 3 apt update apt install sudo adduser adduser \u0026lt;your-username\u0026gt; 在按照提示设置密码和其他信息后，我们需要将新建的用户加入 sudo 组：\n如果你在 apt update 时遇到了网络问题，可以尝试更换软件源，或者使用代理（参看代理 Docker 容器）。\n1 usermod -aG sudo \u0026lt;your-username\u0026gt; 使用 su 命令切换到新建的用户，并测试一下 sudo 是否正常工作：\n1 2 su - \u0026lt;your-username\u0026gt; sudo whoami 如果输出为 root，则说明 sudo 已经正常工作。\nDocker 快捷命令 在继续配置 Ubuntu 容器之前，我想先让启动和退出容器更加方便。\n首先使用 docker ps -a 查看容器的 ID，然后使用 docker rename \u0026lt;container-id\u0026gt; ubuntu 命令为容器设置别名为 ubuntu。\n随后，我在 ~/.config/fish/config.fish 中添加了以下两个 alias：\n1 2 alias ubuntu \u0026#39;docker start ubuntu \u0026amp;\u0026amp; docker attach ubuntu\u0026#39; alias ubuntu-stop \u0026#39;docker stop ubuntu\u0026#39; 运行 source ~/.config/fish/config.fish 使配置生效。\nps: 如果你使用的是 bash，可以将 alias 添加到 ~/.bashrc 中，并运行 source ~/.bashrc，注意，bash 的 alias 语法和 fish 有所不同，需要使用一个 = 号：alias ubuntu='docker start ubuntu \u0026amp;\u0026amp; docker attach ubuntu'。\n配置 Ubuntu 容器 fish shell 我习惯使用 fish shell，并以 fish 为默认 shell。在容器中，我首先安装了 fish shell：\n1 sudo apt install fish 我没有使用 chsh 命令来更改默认 shell，而是直接修改了对 ubuntu 命令的 alias：\n1 alias ubuntu \u0026#34;docker start ubuntu \u0026amp;\u0026amp; docker exec -it --user \u0026lt;your-username\u0026gt; ubuntu fish -C \u0026#39;cd ~\u0026#39;\u0026#34; 这样，每次进入容器时，都会以普通用户的身份进入 fish shell，并且进入到用户目录。\n到这里，我已经接近了日常使用 Ubuntu 的体验。\nscreenfetch 我喜欢登陆时看到 screenfetch，如果诚实地说，是因为这满足了我小时候对“黑客”的幻想。\n我需要在 Docker 容器中安装 screenfetch，然后在 fish 的配置文件中添加 screenfetch 命令。\n1 2 sudo apt install screenfetch echo \u0026#34;screenfetch 2\u0026gt;/dev/null\u0026#34; \u0026gt;\u0026gt; ~/.config/fish/config.fish 这里，因为 screenfetch 无法访问宿主机的信息，会显示一行错误信息，我希望过滤它，所以我在 screenfetch 命令后面加了一个 2\u0026gt;/dev/null 来丢弃错误信息。\n我说，谁能拒绝一个 screenfetch 呢？\n","permalink":"http://localhost:1313/post/2024/12/run-ubuntu-on-mac-with-docker/","summary":"\u003ch2 id=\"背景\"\u003e背景\u003c/h2\u003e\n\u003cp\u003e我校的操作系统课程设计是斯坦福大学的 pintos 项目（当然只需要完成少量的 project）。pintos 需要在 x86 架构的 Linux 系统上运行，但是我最近主力使用的是一台 Macbook Pro，我不太愿意每天背着两台电脑去图书馆。\u003c/p\u003e\n\u003cp\u003e我原本的设想是把我运行 Ubuntu 机器放在宿舍，通过校园网 ssh 连接到它。但是这样做有两个问题：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e校园网的网络环境不太好，即使是使用代理也无法保证一些软件源的稳定连接。\u003c/li\u003e\n\u003cli\u003e学校最近在进行消防安全检查，不允许离开宿舍时不断电源，而我没法保证宿舍时刻都有人。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e看起来，我只能在 Mac 上跑一个虚拟机了；然而我不太喜欢使用虚拟机的使用体验：在运行时占用太多的内存，启动或者关闭需要等待太长的时间。我希望有一个更轻量的解决方案。\u003c/p\u003e\n\u003cp\u003e最近，我关注的 up 主 \u003ca href=\"https://space.bilibili.com/13081489\"\u003e@TheCW\u003c/a\u003e 在沉寂了一年之后忽然更新了一个视频。我重新回看了他之前发布的几个视频后，忽然发现他在 Mac 上需要一个 Linux 环境时，直接用 docker run 了一个全新的 Ubuntu 镜像，这个方法看起来非常轻巧——非常适合我。\u003c/p\u003e\n\u003cp\u003e下文是我在 Mac 上使用 docker 运行 Ubuntu 的步骤。\u003c/p\u003e\n\u003ch2 id=\"安装-docker-desktop-for-mac\"\u003e安装 Docker Desktop for Mac\u003c/h2\u003e\n\u003cp\u003e访问 \u003ca href=\"https://www.docker.com/products/docker-desktop\"\u003eDocker 官网\u003c/a\u003e 下载 Docker Desktop for Mac 即可，这部分不再赘述。\u003c/p\u003e\n\u003ch2 id=\"下载并运行-ubuntu-镜像\"\u003e下载并运行 Ubuntu 镜像\u003c/h2\u003e\n\u003cp\u003e在终端中输入以下命令来拉取 Ubuntu 镜像：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edocker pull --platform linux/amd64 ubuntu\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e我使用 \u0026ndash;platform 来指定镜像的架构，因为我需要一个 x86 架构的镜像；如果直接使用 \u003ccode\u003edocker pull ubuntu\u003c/code\u003e，docker 会默认自动选择当前机器的架构，这对我来说当然是不行的。\u003c/p\u003e","title":"如何使用 docker 在 Mac 上运行并配置 Ubuntu"},{"content":"","permalink":"http://localhost:1313/post/2024/12/changes-to-cs-from-ai/","summary":"","title":"AI 时代，知识的价值"},{"content":"我是浙江工业大学计算机科学与技术专业的学生，本科三年级在读。\n我本科期间参加了 ICPC/CCPC 竞赛，最好的成绩是 ICPC 亚洲区域赛铜牌，CCPC 全国赛铜牌。\n我从 2023.5 开始在某 Top 高校网络安全实验室线上实习，目前在做工业控制系统网络异常检测的相关工作。\n这个博客是个人性质的，主题上相对杂乱，并非只有技术性的内容。\n我会在这里总结学习到的计算机科学相关知识，也会分享一些个人思考，写一些随笔或记录性质的文字。不过总体而言，我会尽量保持博客的内容质量。\n如果你对我或者我博客的内容感兴趣，可以通过以下方式联系我：\n邮箱：Southernwood.zn@gmail.com ","permalink":"http://localhost:1313/about/","summary":"\u003cp\u003e我是浙江工业大学计算机科学与技术专业的学生，本科三年级在读。\u003c/p\u003e\n\u003cp\u003e我本科期间参加了 ICPC/CCPC 竞赛，最好的成绩是 ICPC 亚洲区域赛铜牌，CCPC 全国赛铜牌。\u003c/p\u003e\n\u003cp\u003e我从 2023.5 开始在某 Top 高校网络安全实验室线上实习，目前在做工业控制系统网络异常检测的相关工作。\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003e这个博客是个人性质的，主题上相对杂乱，并非只有技术性的内容。\u003c/p\u003e\n\u003cp\u003e我会在这里总结学习到的计算机科学相关知识，也会分享一些个人思考，写一些随笔或记录性质的文字。不过总体而言，我会尽量保持博客的内容质量。\u003c/p\u003e\n\u003cp\u003e如果你对我或者我博客的内容感兴趣，可以通过以下方式联系我：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e邮箱：\u003ca href=\"mailto:Southernwood.zn@gmail.com\"\u003eSouthernwood.zn@gmail.com\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"About"},{"content":"我目前在外校的网络安全实验室线上实习，实验室有一台共享的 Linux 服务器，我至今为止的所有工作几乎都是在这台服务器上完成的。\n尽管有一定的 Linux 使用经验，但是我还是在整个实习过程中遇到了比较多的问题。究其原因，使用一台属于自己的 Linux 本地机器，和作为一个普通用户访问共享的 Linux 服务器，这之间还是有较大的区别的。\n这篇文章里，我想分享下我使用服务器中用到的一些工具，遇到的问题以及解决方案。\nSSH 连接工具 我找不出任何不推荐 VS Code Remote-SSH 插件的理由。\n只需要简单的配置，你就可以使用本地的 VS Code 终端编辑远程服务器上的文件，同时，所有的插件和配置都能方便地同步到远程服务器上，体验上和本地写代码并没有区别。\n最重要的是，Github Copilot 也能在远程服务器上方便地访问。使用过 AI Copilot 后，我很难回到没有 AI 插件的环境了，由俭入奢易，由奢入俭难啊。\n并行化工具 在服务器上，我经常需要同时运行多个任务。特别常见的场景是，同一段代码需要在不同的数据集或者不同的参数设置下进行评估。\n这种情况如果在本地的机器，我可能会用 GNU Parallel；但是服务器上并没有安装这个工具。作为一个替代方案，我常用的方式是手动写一个 shell 脚本来管理任务。\n例如，main.py 这个程序需要在 10 个数据集上运行，我写的 shell 脚本可能会像这样：\n1 2 3 4 5 6 #!/bin/bash for i in {1..10} do nohup python main.py --dataset dataset_$i 2\u0026gt;\u0026amp;1 \u0026gt; output_$i.log \u0026amp; done 这里的 nohup 是用来创建后台进程，如果不使用 nohup 直接运行 python main.py，在 SSH 连接中断后程序会停止运行；\u0026amp; 是用来将任务放到后台运行，和当前的终端分离。\n当然，这是只是最粗糙的并行脚本，它的问题有很多，最容易想到的有两点：\n一些任务可能会占用太多的 CPU 资源，导致服务器上的其他任务无法正常运行。 所有任务的输出都被 nohup 默认重定向到 nohup.out 文件，这样会导致输出混乱，不方便查看。 所以，我实际上会在脚本里手动控制并行任务的数量，并将输出重定向到不同的文件中。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/bin/bash max_jobs=5 current_jobs=0 for i in {1..10} do if [ $current_jobs -lt $max_jobs ]; then nohup python main.py --dataset $i 2\u0026gt;\u0026amp;1 \u0026gt; output_$i.log \u0026amp; current_jobs=$((current_jobs+1)) else wait -n i=$((i-1)) fi done 避免占用过多资源 虽然上面展示的仍然是一个比较粗糙和简单的脚本，但是已经能满足我的需求了，我在几个月内都在使用这样的脚本来完成任务。\n直到最近，共用服务器的其他老师反馈说我的任务占用了太多的 CPU 资源，导致他们的实验无法正常进行了，并提醒我要限制 numpy 的线程数。我打开 htop 一看，才发现所有的 CPU 都在满载状态，load average 高达 700~800（服务器有 112 个逻辑 CPU），这时我才意识到问题的严重性。\n紧急 pkill 了所有任务来释放所有资源之后，我按照老师提示的方法设置了 numpy 的线程数，问题才得以解决。\n事后复盘发现，我当时在实验的代码是一段 python 代码，其中的 numpy 模块运行时默认会尝试用所有 CPU 核心进行多线程优化，这是因为 numpy 调用的底层是一些高性能计算库，这些计算库会尽可能利用所有的 CPU. 为了限制这些高性能库榨干服务器的计算资源，需要在调用 numpy 之前先设置环境变量，使这些库认为只有少量的 CPU 可以使用。\n1 2 3 4 5 6 import os os.environ[\u0026#34;OMP_NUM_THREADS\u0026#34;] = \u0026#34;4\u0026#34; # OpenMP 线程数 os.environ[\u0026#34;OPENBLAS_NUM_THREADS\u0026#34;] = \u0026#34;4\u0026#34; # OpenBLAS 线程数 os.environ[\u0026#34;MKL_NUM_THREADS\u0026#34;] = \u0026#34;4\u0026#34; # MKL 线程数 os.environ[\u0026#34;NUMEXPR_NUM_THREADS\u0026#34;] = \u0026#34;4\u0026#34; # NumExpr 线程数 import numpy as np 在设置这些变量后重新运行一段时间后，服务器上出现了其他问题：内存占用过高，可用内存仅剩 10GB/400GB。经过 htop 查看和分析后，导致这些问题的仍然是我的并行任务\u0026hellip;\n对于内存的限制还是比较容易的，我在 shell 脚本的最上面加了一行 ulimit -v，限制整个脚本的内存使用量。\n硬盘空间管理 服务器上的硬盘空间是有限的，但是 home 文件夹的膨胀是没有止境的。\n好在实验室有额外加装的硬盘，挂载在 /data 目录下。 最开始，我只是把不太常用的数据集放在了 /data 目录下。但后来随着使用时间的增加，home 文件夹下各类文件也越来越多。按照实验室建议，我开始把一些比较常用，但是占用了较大空间的文件夹都挪到了 /data 目录下，然后用 ln -s 重新软链接回 home 文件夹。\n1 2 mv ~/folder /data/my_user_name/folder ln -s /data/my_user_name/folder ~/folder ","permalink":"http://localhost:1313/post/2024/11/how-to-use-resources-on-a-shared-linux-server/","summary":"\u003cp\u003e我目前在外校的网络安全实验室线上实习，实验室有一台共享的 Linux 服务器，我至今为止的所有工作几乎都是在这台服务器上完成的。\u003c/p\u003e\n\u003cp\u003e尽管有一定的 Linux 使用经验，但是我还是在整个实习过程中遇到了比较多的问题。究其原因，使用一台属于自己的 Linux 本地机器，和作为一个普通用户访问共享的 Linux 服务器，这之间还是有较大的区别的。\u003c/p\u003e\n\u003cp\u003e这篇文章里，我想分享下我使用服务器中用到的一些工具，遇到的问题以及解决方案。\u003c/p\u003e\n\u003ch2 id=\"ssh-连接工具\"\u003eSSH 连接工具\u003c/h2\u003e\n\u003cp\u003e我找不出任何不推荐 VS Code Remote-SSH 插件的理由。\u003c/p\u003e\n\u003cp\u003e只需要简单的配置，你就可以使用本地的 VS Code 终端编辑远程服务器上的文件，同时，所有的插件和配置都能方便地同步到远程服务器上，体验上和本地写代码并没有区别。\u003c/p\u003e\n\u003cp\u003e最重要的是，Github Copilot 也能在远程服务器上方便地访问。使用过 AI Copilot 后，我很难回到没有 AI 插件的环境了，由俭入奢易，由奢入俭难啊。\u003c/p\u003e\n\u003ch2 id=\"并行化工具\"\u003e并行化工具\u003c/h2\u003e\n\u003cp\u003e在服务器上，我经常需要同时运行多个任务。特别常见的场景是，同一段代码需要在不同的数据集或者不同的参数设置下进行评估。\u003c/p\u003e\n\u003cp\u003e这种情况如果在本地的机器，我可能会用 GNU Parallel；但是服务器上并没有安装这个工具。作为一个替代方案，我常用的方式是手动写一个 shell 脚本来管理任务。\u003c/p\u003e\n\u003cp\u003e例如，main.py 这个程序需要在 10 个数据集上运行，我写的 shell 脚本可能会像这样：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#!/bin/bash\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e i in \u003cspan class=\"o\"\u003e{\u003c/span\u003e1..10\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003edo\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    nohup python main.py --dataset dataset_\u003cspan class=\"nv\"\u003e$i\u003c/span\u003e 2\u0026gt;\u003cspan class=\"p\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e \u0026gt; output_\u003cspan class=\"nv\"\u003e$i\u003c/span\u003e.log \u003cspan class=\"p\"\u003e\u0026amp;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003edone\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e这里的 nohup 是用来创建后台进程，如果不使用 nohup 直接运行 python main.py，在 SSH 连接中断后程序会停止运行；\u0026amp; 是用来将任务放到后台运行，和当前的终端分离。\u003c/p\u003e","title":"如何在共享的 Linux 服务器上使用资源"},{"content":"写下这些字的时候，我正在从沈阳飞往杭州的飞机上。\n几个小时前，ICPC 沈阳站的比赛刚刚结束，我们队又拿了一块铜牌。实际上，我们已经有一块 ICPC 成都站的铜牌和一块 CCPC 郑州站的铜牌了，我们都非常想要拿一块银牌。\n然而，我们已经用尽所有的比赛名额，ICPC 沈阳已经是我们最后一次冲击银牌的机会了。无论赛后发现我们曾经多么多么接近那块银牌，都已经于事无补，我必须接受铜牌退役的事实。\n我完全不是一个天赋型的算法竞赛选手，而我的努力实际上也还远远不够。\n我在高中并不是一个信息学奥赛选手。作为浙江考生，我没有选考技术这门课。在被浙工大计算机录取之前，我甚至没有实际写过一行代码。我走上算法竞赛这条路，成为一个 ACMer，或者严谨地来说，一个 XCPCer，完全是机缘巧合。\n大一的《C 语言程序设计》 是我的第一门编程课，教我这门课的老师课外在做程序设计竞赛的辅导，有一个自己的 OJ，平时的作业和测验都在 OJ 上布置，上课的形式也是对着 OJ 的题目，边讲解知识点边写代码——他的上课方式在整个学院都是相当特别的。\n我在上大学之前的暑假很认真地学习了翁恺老师 MOOC 上的 C 语言公开课，所以大一的 C 语言课我上得相当轻松。张老师特别的上课方式让我快速熟悉了 OJ 评测系统，并积累了一些调简单程序的技巧；我很快不满足在做课内的 OJ 练习题，而是开始做洛谷的入门题单。\n学校的程序设计迎新赛在 11 月份开始了，我抱着试一试的心态参加了。在我运气大爆发，连续正确猜出两道题目的结论之后，我竟然拿到了迎新赛的银牌。这是校 ACM 集训队的入场券。\n集训队的训练当然是很辛苦的，即便我自认为努力程度远远不够，也同样被集训队的训练压得有些喘不过气。我几乎从来没有享受过一个悠闲的周末，寒暑假期间也有一半的时间需要训练，codeforces 的比赛如果出现在假期，那么我不得不熬夜到一两点钟……当然，那些能在区域赛场上摘金夺银的队伍，他们大多花费了比我更多更多的时间和精力。\n然而，我似乎不是一个适合算法竞赛的选手。我眼里适合算法竞赛的选手，要么具有绝对的天赋，要么对算法竞赛有足够的热情。我显然并不是具有绝对天赋的选手，我对算法竞赛的热情也在学业的压力下慢慢在消退。在算法竞赛生涯的后期，我仍然做题、补题，但是我好像没有足够的热情去学新的算法竞赛知识，大部分时候只是在原地踏步。\n我们学校有一个德育导师的政策，在大二上学期会安排学生和导师双向选择。不过这个德育导师似乎并没有什么实际含义，大部分同学随机选择一位导师签字后，就再也没和老师联系过了。\n我觉得这是一个不错的开始接触科研的机会，所以我很认真地在学院官网上选择了一个导师，发了一封邮件给她。她是学校新来的青年教师，清华大学博士，做安全方向，有非常不错的成果。\n现在回想起来，联系导师可能是区域赛遗憾铜牌的一个伏笔。我联系老师后，老师对我的基本条件比较满意，让我跟着课题组一起做课题。我从那个时候开始跟着老师做一些实验，最开始是复现一些 baseline，到后面慢慢开始比较深度地参与课题研究。这些当然也需要时间。\n时间，时间，我的人生中从来没有像过去的一年里这样缺少过时间。大二这一年的专业课众多，我还花了大量的时间在程序设计竞赛和课题实验上，每门课都只能在考试周之前狼狈地开始突击，常常有作业在 DDL 前几个小时才开始做。\n我的生活狼狈不堪。\n在这段时间里我的体重飞速上涨，精神状态每况愈下，我坚持下去的原因是，我觉得 这一切会有终点 。我的算法竞赛生涯会结束，我的课题研究也会结束，我铺满课表的专业课也会结束；有一天我会到达这一切的终点，在那里我可以坐下来好好休息。\n出发来沈阳的前一天，我和葱葱聊了很久很久。我说我觉得自己想错了，这一切都没有终点。\n是的，我的算法竞赛生涯已经结束了，再也没有训练和补题了；这学期结束之后，下个学期的课表上只有轻松的几门课；我的课题也会在几个月之后接近尾声。\n但是我马上要面对保研，面对夏令营和预推免。那时候我会不会说，再坚持一下，就算我的健康状况越来越差，我的精神快要崩溃？在这之后呢？研究生的终点是毕业，工作的终点又是什么？\n在“终点”之前，我还需要放弃什么？我曾经喜欢写一些文字，读一些书，打篮球，钻研一些新技术只是因为有意思。现在我已经不再写日记和随笔，体重飞涨，为体测能否及格发愁，这个博客的从搭建以来仅有可怜的几篇文章。\n生活是没有终点的。\n飞机要降落了，我马上要回到杭州。\n我原本以为生活会像一连串的短途旅行，飞机上的颠簸和轰鸣声总会在抵达目的地后结束，然后你可以享受鲜花、阳光和清新的空气；但是我错了，生活像是徒步穿越山谷，强撑着酸痛的身体和疲惫的心灵走出山谷，只会发现所有美丽的景色都留在了山谷里，而你已经全部错过。\n","permalink":"http://localhost:1313/post/2024/11/life-never-ends/","summary":"\u003cp\u003e写下这些字的时候，我正在从沈阳飞往杭州的飞机上。\u003c/p\u003e\n\u003cp\u003e几个小时前，ICPC 沈阳站的比赛刚刚结束，我们队又拿了一块铜牌。实际上，我们已经有一块 ICPC 成都站的铜牌和一块 CCPC 郑州站的铜牌了，我们都非常想要拿一块银牌。\u003c/p\u003e\n\u003cp\u003e然而，我们已经用尽所有的比赛名额，ICPC 沈阳已经是我们最后一次冲击银牌的机会了。无论赛后发现我们曾经多么多么接近那块银牌，都已经于事无补，我必须接受铜牌退役的事实。\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003e我完全不是一个天赋型的算法竞赛选手，而我的努力实际上也还远远不够。\u003c/p\u003e\n\u003cp\u003e我在高中并不是一个信息学奥赛选手。作为浙江考生，我没有选考技术这门课。在被浙工大计算机录取之前，我甚至没有实际写过一行代码。我走上算法竞赛这条路，成为一个 ACMer，或者严谨地来说，一个 XCPCer，完全是机缘巧合。\u003c/p\u003e\n\u003cp\u003e大一的《C 语言程序设计》 是我的第一门编程课，教我这门课的老师课外在做程序设计竞赛的辅导，有一个自己的 OJ，平时的作业和测验都在 OJ 上布置，上课的形式也是对着 OJ 的题目，边讲解知识点边写代码——他的上课方式在整个学院都是相当特别的。\u003c/p\u003e\n\u003cp\u003e我在上大学之前的暑假很认真地学习了翁恺老师 MOOC 上的 C 语言公开课，所以大一的 C 语言课我上得相当轻松。张老师特别的上课方式让我快速熟悉了 OJ 评测系统，并积累了一些调简单程序的技巧；我很快不满足在做课内的 OJ 练习题，而是开始做洛谷的入门题单。\u003c/p\u003e\n\u003cp\u003e学校的程序设计迎新赛在 11 月份开始了，我抱着试一试的心态参加了。在我运气大爆发，连续正确猜出两道题目的结论之后，我竟然拿到了迎新赛的银牌。这是校 ACM 集训队的入场券。\u003c/p\u003e\n\u003cp\u003e集训队的训练当然是很辛苦的，即便我自认为努力程度远远不够，也同样被集训队的训练压得有些喘不过气。我几乎从来没有享受过一个悠闲的周末，寒暑假期间也有一半的时间需要训练，codeforces 的比赛如果出现在假期，那么我不得不熬夜到一两点钟……当然，那些能在区域赛场上摘金夺银的队伍，他们大多花费了比我更多更多的时间和精力。\u003c/p\u003e\n\u003cp\u003e然而，我似乎不是一个适合算法竞赛的选手。我眼里适合算法竞赛的选手，要么具有绝对的天赋，要么对算法竞赛有足够的热情。我显然并不是具有绝对天赋的选手，我对算法竞赛的热情也在学业的压力下慢慢在消退。在算法竞赛生涯的后期，我仍然做题、补题，但是我好像没有足够的热情去学新的算法竞赛知识，大部分时候只是在原地踏步。\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003e我们学校有一个德育导师的政策，在大二上学期会安排学生和导师双向选择。不过这个德育导师似乎并没有什么实际含义，大部分同学随机选择一位导师签字后，就再也没和老师联系过了。\u003c/p\u003e\n\u003cp\u003e我觉得这是一个不错的开始接触科研的机会，所以我很认真地在学院官网上选择了一个导师，发了一封邮件给她。她是学校新来的青年教师，清华大学博士，做安全方向，有非常不错的成果。\u003c/p\u003e\n\u003cp\u003e现在回想起来，联系导师可能是区域赛遗憾铜牌的一个伏笔。我联系老师后，老师对我的基本条件比较满意，让我跟着课题组一起做课题。我从那个时候开始跟着老师做一些实验，最开始是复现一些 baseline，到后面慢慢开始比较深度地参与课题研究。这些当然也需要时间。\u003c/p\u003e\n\u003cp\u003e时间，时间，我的人生中从来没有像过去的一年里这样缺少过时间。大二这一年的专业课众多，我还花了大量的时间在程序设计竞赛和课题实验上，每门课都只能在考试周之前狼狈地开始突击，常常有作业在 DDL 前几个小时才开始做。\u003c/p\u003e\n\u003cp\u003e我的生活狼狈不堪。\u003c/p\u003e\n\u003cp\u003e在这段时间里我的体重飞速上涨，精神状态每况愈下，我坚持下去的原因是，我觉得 \u003cstrong\u003e这一切会有终点\u003c/strong\u003e 。我的算法竞赛生涯会结束，我的课题研究也会结束，我铺满课表的专业课也会结束；有一天我会到达这一切的终点，在那里我可以坐下来好好休息。\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003e出发来沈阳的前一天，我和葱葱聊了很久很久。我说我觉得自己想错了，这一切都没有终点。\u003c/p\u003e\n\u003cp\u003e是的，我的算法竞赛生涯已经结束了，再也没有训练和补题了；这学期结束之后，下个学期的课表上只有轻松的几门课；我的课题也会在几个月之后接近尾声。\u003c/p\u003e\n\u003cp\u003e但是我马上要面对保研，面对夏令营和预推免。那时候我会不会说，再坚持一下，就算我的健康状况越来越差，我的精神快要崩溃？在这之后呢？研究生的终点是毕业，工作的终点又是什么？\u003c/p\u003e\n\u003cp\u003e在“终点”之前，我还需要放弃什么？我曾经喜欢写一些文字，读一些书，打篮球，钻研一些新技术只是因为有意思。现在我已经不再写日记和随笔，体重飞涨，为体测能否及格发愁，这个博客的从搭建以来仅有可怜的几篇文章。\u003c/p\u003e\n\u003cp\u003e生活是没有终点的。\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003e飞机要降落了，我马上要回到杭州。\u003c/p\u003e\n\u003cp\u003e我原本以为生活会像一连串的短途旅行，飞机上的颠簸和轰鸣声总会在抵达目的地后结束，然后你可以享受鲜花、阳光和清新的空气；但是我错了，生活像是徒步穿越山谷，强撑着酸痛的身体和疲惫的心灵走出山谷，只会发现所有美丽的景色都留在了山谷里，而你已经全部错过。\u003c/p\u003e","title":"生活没有终点"},{"content":"我在去年购入了一台二手的 thinkpad x1 carbon 2018，我在上面安装了 Ubuntu 22.04 LTS，并小小地体验过类 Unix 系统的便利。\n不过，我一直没有下定决心迁移到 Linux 的工作流。这主要因为 Linux 下的软件生态和 Windows 下的软件生态不同，我需要花时间去适应，寻找一些软件的替代品。而作为一个 Linux 菜鸟，任何一个小问题都可能将我卡住，使我被迫花费大量的时间寻找解决方案。\n当然，人是会成长的。现在，我已经在 Ubuntu 的服务器上实际完成过一些小工作，也在 Windows 下使用过 WSL2，有一些基本的命令行操作经验和 Linux 系统的基本知识。我觉得现在是时候将我的工作流从 Windows 转移到 Linux 了。\n因此，我希望声明的是，这篇文章不是一篇从零开始的 Ubuntu 使用指南。我不会介绍如何烧录镜像，如何安装 Ubuntu，如何配置网络，如何安装软件等等。我会假设你已经有一些简单的 Linux 使用经验，或者至少有一定的命令行操作经验。\n这篇文章会是：\n一篇关于 Ubuntu 实用软件的简短使用指南 一篇介绍我如何将工作流从 Windows 转到 Linux 操作系统的博客 一篇介绍如何在 Ubuntu 上安装和使用 Windows 下一些常见软件的文章 这篇文章不会是：\n一篇从烧录镜像开始到搭建可用环境的新手教程 一篇介绍 Ubuntu 系统的高级使用技巧的文章 补充说明：我在这篇博客中使用的操作系统是 Ubuntu24.04 LTS 桌面版。\nWindows 个人常用软件或替代方案 微信 长久以来，微信都没有官方的 Linux 客户端。在 Linux 上使用微信一直是个难题，不过好消息是，现在我们有原生的 WeChat 客户端了。\nWeChat-beta 是腾讯官方针对统信 uos 系统开发的微信客户端，在登录过程中会检测系统是否为统信 uos 系统，如果不是则无法登录。不过，在 github 上能找到魔改后的 WeChat-beta，绕过了登陆检测，可以在 Ubuntu24.04LST 上正常使用。\n下载后使用 apt-get 解压安装，这可以自动解决一些依赖问题，对新手很友好。\n注意，即使 deb 包在当前目录下，也需要使用 ./ 前缀，否则 apt-get 会从软件源中尝试匹配下载。\n1 sudo apt-get install ./wechat-beta_1.0.0.145_amd64.fixed.deb 如果需要卸载，可以使用 apt-get remove 命令。\n1 sudo apt-get remove wechat-beta QQ QQ 有一个官方的最新版 Linux 客户端，和 Windows 版本的功能、外观几乎一致。\n可以在 QQ-linux 版 下载最新版的 deb 包，可以和微信一样，使用 apt-get 安装。\nApple Music 苹果当然没有为 Linux 开发 Apple Music 客户端，不过我们可以使用网页版的 Apple Music. ubuntu 的 snap store 里有一个 Apple Music for Linux 的 snap 包，本质上是包装了一个浏览器页面，功能上和网页版一致。\nubuntu 用户可以使用 snap 安装：\n1 sudo snap install apple-music-for-linux OneDrive 从源代码构建 OneDrive Client for Linux OneDrive 也没有官方的 Linux 客户端，不过存在一个开源的第三方客户端 OneDrive Client for Linux，还有一个配套的 GUI 界面 OneDriveGUI，整体使用体验还不错。\n截至目前，OneDrive Client for Linux 仍然在维护，我写这篇文章时的最新版本是 2.5.0-rc2, 是一个全新的重构版本，与 v2.4.x 版本不兼容。由于我使用的是还处于实验阶段的 Ubuntu24.04LST，开发者没有提供对应的 deb 包，所以我只能使用源码编译安装。\n注意，有存在适用于 ubuntu 的 OneDrive Universe 软件源，但是这些软件源已经过期并且不再维护，不推荐使用，因此请不要尝试使用 apt-get 安装。\n从源代码编译安装 OneDrive Client for Linux，可以参看 docs/install.md 文档。\nUbuntu24.04LST 上的安装步骤如下：\n安装依赖项，并安装 DMD 编译器：\n1 2 3 sudo apt install build-essential sudo apt install libcurl4-openssl-dev libsqlite3-dev pkg-config git curl curl -fsS https://dlang.org/install.sh | bash -s dmd 激活 DMD 编译器：\n1 source ~/dlang/dmd-2.xxx.0/activate 其中 xxx 是版本号，需要根据实际情况替换。在通过 curl 安装 DMD 编译器成功时，会有提示如下：\n1 2 3 Run `source ~/dlang/dmd-2.xxx.0/activate` in your shell to use dmd-2.xxx.0. This will setup PATH, LIBRARY_PATH, LD_LIBRARY_PATH, DMD, DC, and PS1. Run `deactivate` later on to restore your environment. 根据提示激活对应版本的 DMD 编译器即可，如果已经错过了提示，可以进入 ~/dlang/ 目录查看 dmd-2.xxx.0 目录的具体版本号。\n下载源代码并编译安装：\n1 2 3 4 5 git clone https://github.com/abraunegg/onedrive.git cd onedrive ./configure make clean; make; sudo make install 安装完成后，可以使用 onedrive 命令行工具进行配置和同步。不过我更推荐新手使用 OneDriveGUI，它提供了一个友好的图形界面，对从刚刚 Windows 迁移到 Linux 的用户更友好。\n从源代码构建 OneDriveGUI OneDriveGUI 的安装方法可以参看 OneDriveGUI 的说明。不过，开发者只提供了一个 AppImage 文件，理论上可以直接下载运行。\n我在 Ubuntu24.04LST 上运行 AppImage 时遇到了一些权限问题，sudo 启动可以解决这个问题，但是每次启动都需要输入密码。作为一个云同步工具，我希望它能开机自启，并且静默地在后台运行，而不是每次都要手动打开，输入密码。\n所以我只能：从源代码编译 OneDriveGUI 程序。\n首先需要确定自己在 ubuntu 上安装了 Python3 以及 pip 工具。\n克隆 OneDriveGUI 项目到本地，并进入项目目录：\n1 2 git clone https://github.com/bpozdena/OneDriveGUI.git cd OneDriveGUI 这里，官方文档直接使用 pip 下载软件包：\n1 python3 -m pip install -r requirements.txt 但是，我在 Ubuntu24.04LST 上实际使用 python3.12，无法下载软件包，提示：\npython3.12 不再支持全局 pip 下载软件包，并且为了防止 pip 和 apt 等包管理器混在一起，最推荐的做法应该是首先为 OneDriveGUI 创建一个虚拟环境：\n1 2 3 4 python3 -m venv venv source venv/bin/activate python3 -m pip install -r requirements.txt deactivate 这样，OneDriveGUI 就可以在虚拟环境中运行，不会影响到系统的其他软件包。\n最后，使用 python3 运行 OneDriveGUI：\n1 2 cd src/ python3 OneDriveGUI.py 这样，就可以在 Ubuntu24.04LST 上使用 OneDrive 了。\n首次登陆时，应用会打开一个浏览器页面，需要输入微软账号和密码，授权 OneDriveGUI 访问你的 OneDrive 账号；还需要选择同步文件夹和 OneDrive 客户端（不是 OneDriveGUI）二进制文件所在的文件夹。\n配置桌面快捷方式和开机自启 Ubuntu 下的桌面快捷方式文件是 .desktop 文件，在 /usr/share/applications/ 目录下新建 OneDriveGUI.desktop 文件，就可以在应用菜单中找到 OneDriveGUI。\n1 sudo vim /usr/share/applications/OneDriveGUI.desktop 在文件中写入以下内容：\n1 2 3 4 5 6 7 8 [Desktop Entry] Name=OneDriveGUI Exec=path/venv/bin/python3 path/src/OneDriveGUI.py Path=path Icon=path/src/resources/images/icons8-clouds-48.ico Terminal=false Type=Application StartupNotify=false 其中，path 是 OneDriveGUI 的安装路径，根据自己安装时的路径进行替换即可。\n如果需要开机自启，可以将 OneDriveGUI.desktop 文件拷贝到 ~/.config/autostart 目录下：\n1 cp /usr/share/applications/OneDriveGUI.desktop ~/.config/autostart 不过，实际使用下来发现，直接拷贝后开机自启动的 OneDriveGUI 无法最小化到托盘，而是只能最小化到 dock 栏，并且不能获取 icon 图片，效果十分丑陋；但是而点击桌面图标时又能正确打开，并加载 icon 图片。\n运用我机智的头脑推测原因，应该是因为开机自启动 OneDriveGUI 时，系统的一些其他程序还未完全启动，导致一些 api 接口无法正确调用导致的。于是我想出了一个简单的解决方案：\n1 sudo vim ~/.config/autostart/OneDriveGUI.desktop 将 Exec 的内容替换为\n1 Exec=zsh -c \u0026#34;sleep 15 \u0026amp;\u0026amp; path/venv/bin/python3 path/src/OneDriveGUI.py\u0026#34; 其中 path 是 OneDriveGUI 的安装路径，zsh 是我使用的终端，如果你没有手动替换过，默认终端应该是 bash.\n没错，只需要让开机自启程序 sleep 一段时间，再启动 OneDriveGUI 就可以了，实测效果很好。\n记得在 OneDrive 的 profile settings 中勾选 Auto-Sync on GUI startup，在软件全局的 settings 勾选 Start OneDriveGUI minimized. 这样，只要开机并输入密码登录，OneDrive 就会静静地启动，并开始同步。\n虚拟机使用 Office 软件 在 Linux 下使用 Office 软件也是阻碍我迁移的一个原因。我可以使用 LibreOffice 或者 WPS 作为临时的替代方案，但是这仅限于查看老师发布的 ppt 或者 doc 文件；因为使用其他软件编辑过的文件在 Office 上会出现格式问题，所以如果是需要上交的课程报告，还是需要使用 Office 保证格式。\n当然，我可以使用 Office Online，但是它的功能和体验都不如本地的 Office 软件；使用 wine 安装 Office 也是一个选择，但是 wine 的兼容性和稳定性都不是很好。我认为最稳定的解决方案，还是使用虚拟机安装 Windows 系统，作为 Office 软件的运行环境。\nVMware Workstation Player 是著名的虚拟机软件，2024 年 5 月，VMware 团队宣布 VMware Workstation Pro 17.0 对个人用户免费，因此无需再购买许可证了。\n首先进入博客 VMware Workstation Pro: Now Available Free for Personal Use 。在博客里找到 VMware Workstation Pro Download 的链接，按照提示注册一个 broadcom 账号，即可在跳转页面下载 VMware Workstation Pro 17.0，记得选择 for Personal Use 的版本。\n光盘镜像方面，可以按照自己的需求在 Microsoft 官网下载 Windows 对应版本的 iso 镜像，我选用的 Windows 11 镜像下载链接为 Windows 11 镜像。\n使用 iso 镜像安装 Windows 11 后，需要提供 Windows 11 的激活密钥。如果你是在校大学生，这通常不成问题，学校一般会为在校师生提供正版 Windows 系统的激活方式，可以在学校的官网或者信息化办公室的网站上找到。\n如果你并没有激活密钥，可以考虑下载微软为开发者提供的 Windows 企业评估版镜像，不过这些镜像是提供给企业评估是否购买 Windows 企业版使用的。这个镜像会附带 Visual Studio 的社区版本，启用 WLS2 并预装了 Ubuntu（没错，这样你就可以在 Ubuntu 的 Windows 虚拟机下运行 WSL2 的 Ubuntu 系统了），当然你也可以在底部找到不预装这些软件的版本……\n但这些预装软件不是最重要的。它是一个用于评估的版本，因此它会在 90 天后过期，到时虚拟机会每小时关机一次，并有持续的桌面提示，指示这并不是正版的 Windows 系统。\n目前，我并不知道是否可以通过重装系统来刷新 90 天的评估时间，如果你觉得值得一试，那么祝你好运。不过我仍然不建议长期使用这个版本，我建议可以在正式激活 Windows 11 之前，体验一下虚拟机运行 Windows 11 的流畅程度，来考虑你是否可以接受虚拟机下使用 Office 软件——还是需要安装一个双系统。\nWorkstation Player 17.0 的安装以及虚拟机的创建和配置应该是丝滑的，这里不再赘述，不过如果你真的遇到了问题，可以参考 VMware Workstation Pro 的文档。唯一值得一提的是，虚拟机的配置要根据自己的电脑配置来调整，不要让虚拟机占用过多的资源，导致主机卡顿。作为参考，我正在使用的主机是 4 核 8 线程的 i5-8250U 处理器，16GB 内存，512GB SSD，虚拟机配置为 2 处理器，8 GB 内存，64 GB 硬盘空间。\nOffice 365 的 OEM 许可证是不可迁移的，假如你有一台购买时赠送了 Office 365 的电脑，不用试图通过登录账号来激活 Office 365. 一般来说，你需要自费订阅 Office 365，或者购买 Office 2021 的许可证——当然，在校大学生也可以通过学校获取正版的 Office 2021 许可证。\n终端工具 zsh zsh 是一个支持自动补全、插件化、主体化的 shell. 它兼容默认 bash 的一些配置文件，\n","permalink":"http://localhost:1313/post/2024/6/work-on-ubuntu/","summary":"\u003cp\u003e我在去年购入了一台二手的 thinkpad x1 carbon 2018，我在上面安装了 Ubuntu 22.04 LTS，并小小地体验过类 Unix 系统的便利。\u003c/p\u003e\n\u003cp\u003e不过，我一直没有下定决心迁移到 Linux 的工作流。这主要因为 Linux 下的软件生态和 Windows 下的软件生态不同，我需要花时间去适应，寻找一些软件的替代品。而作为一个 Linux 菜鸟，任何一个小问题都可能将我卡住，使我被迫花费大量的时间寻找解决方案。\u003c/p\u003e\n\u003cp\u003e当然，人是会成长的。现在，我已经在 Ubuntu 的服务器上实际完成过一些小工作，也在 Windows 下使用过 WSL2，有一些基本的命令行操作经验和 Linux 系统的基本知识。我觉得现在是时候将我的工作流从 Windows 转移到 Linux 了。\u003c/p\u003e\n\u003cp\u003e因此，我希望声明的是，这篇文章\u003cstrong\u003e不是\u003c/strong\u003e一篇从零开始的 Ubuntu 使用指南。我不会介绍如何烧录镜像，如何安装 Ubuntu，如何配置网络，如何安装软件等等。我会假设你已经有一些简单的 Linux 使用经验，或者至少有一定的命令行操作经验。\u003c/p\u003e\n\u003cp\u003e这篇文章会是：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e一篇关于 Ubuntu 实用软件的简短使用指南\u003c/li\u003e\n\u003cli\u003e一篇介绍我如何将工作流从 Windows 转到 Linux 操作系统的博客\u003c/li\u003e\n\u003cli\u003e一篇介绍如何在 Ubuntu 上安装和使用 Windows 下一些常见软件的文章\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e这篇文章\u003cstrong\u003e不会\u003c/strong\u003e是：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e一篇从烧录镜像开始到搭建可用环境的新手教程\u003c/li\u003e\n\u003cli\u003e一篇介绍 Ubuntu 系统的高级使用技巧的文章\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e补充说明：我在这篇博客中使用的操作系统是 \u003cstrong\u003eUbuntu24.04 LTS\u003c/strong\u003e 桌面版。\u003c/p\u003e\n\u003ch2 id=\"windows-个人常用软件或替代方案\"\u003eWindows 个人常用软件或替代方案\u003c/h2\u003e\n\u003ch3 id=\"微信\"\u003e微信\u003c/h3\u003e\n\u003cp\u003e长久以来，微信都没有官方的 Linux 客户端。在 Linux 上使用微信一直是个难题，不过好消息是，现在我们有原生的 WeChat 客户端了。\u003c/p\u003e","title":"不是从零开始的 Ubuntu 使用指南"},{"content":" 我发现大学生一旦过了 11 周，就像个忙碌的章鱼哥：一手做实验，一手写实验报告，一手写期末大作业，一手备考四六级，一手复习期末考试；作业还是写一份来一份的。 \u0026mdash;@Kilolo-🐰\n上面这段文案是我在小红书上找到的。\n我第一次看到这段话是在机场的座椅上。这时是凌晨四点钟，六点我要飞到西安，参加 ICPC 全国邀请赛。机场的安检工作人员还没有上班，我坐在座椅上，百无聊赖，打开 Bilibili 刷起了短视频。我就是这时候看到这段话的。\n视频搬运了小红书上的评论区的评论，几张截图简单地剪辑在一起，就获得了不少的点赞和评论。我不喜欢这样的低创视频，也对这种网络 meme 并不十分感冒，但是这段话确实让我笑了出来。\n一手做实验，一手写实验报告，一手写期末大作业，一手备考四六级，一手复习期末考试。\n很形象，很符合我在过去一周的精神状态；至于为什么不是我的现实状态，那当然是因为我只是精神上的千手观音，现实里的独臂杨过。\n第一次坐飞机 从杭州到西安，这是我第一次坐飞机。\n小时候我大概幻想过在飞机上看地面的风景，但是我现在记不得了，我只好幻想小时候的我会如何幻想飞机上的风景了。\n无论如何，小时候的我一定想不到，坐飞机是要乘上一辆摆渡车的。摆渡车急加速的时候，整个车上的乘客都往后趔趄了两步。我没有站稳，倒到了身后的男生身上。我连忙说 “不好意思，不好意思”，结果他好像比我还着急，还没等我说完，已经抢在前面说了“没关系，没关系”。\n在摆渡车上看到的飞机，并没有我想象中的那么震撼。我觉得，飞机的外壳应该更加锃光发亮，机翼应该更加坚硬可靠，飞机的机身应该更加宽大。但现在飞机就停在我的面前，它的外壳有几处有细微的锈迹，机翼看起来有些脆弱，机身看起来有些狭窄。\n它能飞起来吗？我很愚蠢地想。\n它当然是能飞起来的。飞机起飞的时候，舷窗外的地平线是倾斜的，提示你正在斜向上飞行，从舷窗看出去，能看到地面上的建筑不断地变小、变小，道路上的汽车变得像蚂蚁在爬动……怎么好像我小时候会写的那种《2050 年的世界》式的幻想作文，我现在是不是坐在一辆来自未来的、会飞的智能汽车上？\n飞机深入云层，或者降落时的景象，我不知道，因为我在飞机进入云层前就睡着了。中途醒来，是乘务员一边说着 “餐车经过，请当心，请小心”，一边给我发了茶点的时候，我吃了香蕉片、蛋糕和酸奶，然后又沉沉地睡着了。再醒来，飞机已经降落在西安的机场上，开始滑行了。\n古都西安 因为要参加比赛的缘故，我们没有时间和精力进行一场 “特种兵式” 的旅行。我在西安的这两天，只是在一个小镇的酒店里住了两晚，饭点的时候在周围的巷子里转了转。\n我在西安的第一顿饭，是在一个路边摊子上解决的。摊主是个面相和蔼的阿公，我买了一碗牛筋面，又买了个韭菜粉丝饼；队友买了个茄子肉末饼。我们坐下来没吃两口，阿公问我们，你们是哪里来的呀？\n答曰：浙江过来的。\n阿公笑笑，说：“你们可能吃不惯这个（牛筋面），我们这里叫辣条。”\n我们答：就是来吃西安味道的。\n阿公还是笑，说：“那个饼你们可能能吃，这个辣条可能吃不惯。”\n吃了几口，我觉得他说得很有道理。我吃过的凉皮或者是牛筋面，要放黄瓜、花生和豆芽菜，然后淋上料汁、醋和辣椒油，酸辣可口。眼下这碗辣条，只有辣椒面和面条，辣条并不呛人，但是咸得发慌；前面几口的口味还很新奇，越吃越觉得味道单调。\n我还是把辣条吃完了，为的是给咱们浙江人争气，表示我们能广泛地接受不同的美食。\n附上我到西安第一天的食谱：\n8:00 香蕉片、蛋糕、酸奶 11:00 牛筋面（辣条）、韭菜粉丝饼 13:30 五香肘子肉夹馍（肥瘦相间） 18:00 棍棍面（加油泼辣子） 18:30 健胃消食片 比赛 这里本来应该有一段流水账，记录我们比赛的过程。但是我不愿再回忆这场悲伤的比赛，所以这里只有一个十分简略的小结：\n比赛的前期，因为我读错题目，并且头脑不清醒，在一道签到题上浪费了大量时间，并且贡献了 5 发罚时。\n比赛的中期，得益于队友的稳定发挥，我们解题进度整体上中规中矩。封榜后，我继续顽强拼搏，构造了一道题的关键 hack 数据，并提出了修正方法，成功拿下一题。\n比赛结束后，我们一度以为自己拿到了银牌，但是最终，我们只拿到了一块铜牌，并且是充满遗憾的一块铜牌：我们是铜牌的第一名。\n也许我第一遍能读对题目，也许我能更早地构造hack 数据，也许……也许我应该更勇敢地面对自己的失败。\n失败从来是人生常态，我会划着断桨，再次出发\n这是我离开西北工业大学之后，发在朋友圈的一句话。断桨这个意象一定是我从什么地方挪用的，但我已经不到出处了。\n我不想在博客里进行严谨的考据学研究，总而言之，我会划着断桨，再次出发的。\n大学生的第 12 周 我正在酒店房间里，坐在笔记本电脑前写这篇博客。\n就在刚刚，我的算法分析与设计老师发来了明天上机的任务书。明早的课我已经和她请假了，我们订的是明天最早的飞机票，但是还是赶不上那节课。所以，我要在课外的时间去完成这次上机实验了。\n打开超星学习通，一小时后，数字电路的作业就要截止了，我还没有开始做。实际上，我已经拖欠了好几次作业了\u0026mdash;\u0026mdash;自从我发现，数电作业截止后还能正常提交，我就几乎没有按时交过了。\n周三，截止提交计算方法及实现的一份报告。周四之前，要完成计算机组成原理的课程设计，要编写很折磨人的二进制机器指令。此外，还有计组、数据库、数字电路还有思政课的分组任务，我现在仅仅只是组了队，进度为 0%。当然，还有数字电路的课程设计、计算方法的期末论文、自动控制原理的课程报告……这些都要在接下来的一个月有条不紊地完成。\n这就结束了？\n我还要抓紧一切机会，报名志愿者活动，因为我的志愿者工时还没有打满。ACM 集训队的训练在 14 周结束，在此之前需要把每周训练的题目补上，并且整理自己这一学期的做题记录。导师今晚发来一篇论文，希望我能在以后的组会中分享一下，我显然不可能把它拖过期末周。\n我觉得忙碌的章鱼哥这个比喻很形象。但是还不够形象，据我所知，章鱼只有八只手。\n参考文献 我去小红书里找到了最早发布 “大学生一旦过了 11 周” 文案的博主，对她的著作权表示尊重。如果你找到了更早的发布者，或者非常巧，你就是原作者，欢迎你联系我。\n总而言之，以下是这篇博客的参考文献：\n","permalink":"http://localhost:1313/post/2024/5/11st-week/","summary":"\u003cblockquote\u003e\n\u003cp\u003e我发现大学生一旦过了 11 周，就像个忙碌的章鱼哥：一手做实验，一手写实验报告，一手写期末大作业，一手备考四六级，一手复习期末考试；作业还是写一份来一份的。 \u0026mdash;@Kilolo-🐰\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e上面这段文案是我在小红书上找到的。\u003c/p\u003e\n\u003cp\u003e我第一次看到这段话是在机场的座椅上。这时是凌晨四点钟，六点我要飞到西安，参加 ICPC 全国邀请赛。机场的安检工作人员还没有上班，我坐在座椅上，百无聊赖，打开 Bilibili 刷起了短视频。我就是这时候看到这段话的。\u003c/p\u003e\n\u003cp\u003e视频搬运了小红书上的评论区的评论，几张截图简单地剪辑在一起，就获得了不少的点赞和评论。我不喜欢这样的低创视频，也对这种网络 meme 并不十分感冒，但是这段话确实让我笑了出来。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e一手做实验，一手写实验报告，一手写期末大作业，一手备考四六级，一手复习期末考试。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e很形象，很符合我在过去一周的精神状态；至于为什么不是我的现实状态，那当然是因为我只是精神上的千手观音，现实里的独臂杨过。\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"第一次坐飞机\"\u003e第一次坐飞机\u003c/h2\u003e\n\u003cp\u003e从杭州到西安，这是我第一次坐飞机。\u003c/p\u003e\n\u003cp\u003e小时候我大概幻想过在飞机上看地面的风景，但是我现在记不得了，我只好幻想小时候的我会如何幻想飞机上的风景了。\u003c/p\u003e\n\u003cp\u003e无论如何，小时候的我一定想不到，坐飞机是要乘上一辆摆渡车的。摆渡车急加速的时候，整个车上的乘客都往后趔趄了两步。我没有站稳，倒到了身后的男生身上。我连忙说 “不好意思，不好意思”，结果他好像比我还着急，还没等我说完，已经抢在前面说了“没关系，没关系”。\u003c/p\u003e\n\u003cp\u003e在摆渡车上看到的飞机，并没有我想象中的那么震撼。我觉得，飞机的外壳应该更加锃光发亮，机翼应该更加坚硬可靠，飞机的机身应该更加宽大。但现在飞机就停在我的面前，它的外壳有几处有细微的锈迹，机翼看起来有些脆弱，机身看起来有些狭窄。\u003c/p\u003e\n\u003cp\u003e它能飞起来吗？我很愚蠢地想。\u003c/p\u003e\n\u003cp\u003e它当然是能飞起来的。飞机起飞的时候，舷窗外的地平线是倾斜的，提示你正在斜向上飞行，从舷窗看出去，能看到地面上的建筑不断地变小、变小，道路上的汽车变得像蚂蚁在爬动……怎么好像我小时候会写的那种《2050 年的世界》式的幻想作文，我现在是不是坐在一辆来自未来的、会飞的智能汽车上？\u003c/p\u003e\n\u003cp\u003e飞机深入云层，或者降落时的景象，我不知道，因为我在飞机进入云层前就睡着了。中途醒来，是乘务员一边说着 “餐车经过，请当心，请小心”，一边给我发了茶点的时候，我吃了香蕉片、蛋糕和酸奶，然后又沉沉地睡着了。再醒来，飞机已经降落在西安的机场上，开始滑行了。\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"古都西安\"\u003e古都西安\u003c/h2\u003e\n\u003cp\u003e因为要参加比赛的缘故，我们没有时间和精力进行一场 “特种兵式” 的旅行。我在西安的这两天，只是在一个小镇的酒店里住了两晚，饭点的时候在周围的巷子里转了转。\u003c/p\u003e\n\u003cp\u003e我在西安的第一顿饭，是在一个路边摊子上解决的。摊主是个面相和蔼的阿公，我买了一碗牛筋面，又买了个韭菜粉丝饼；队友买了个茄子肉末饼。我们坐下来没吃两口，阿公问我们，你们是哪里来的呀？\u003c/p\u003e\n\u003cp\u003e答曰：浙江过来的。\u003c/p\u003e\n\u003cp\u003e阿公笑笑，说：“你们可能吃不惯这个（牛筋面），我们这里叫辣条。”\u003c/p\u003e\n\u003cp\u003e我们答：就是来吃西安味道的。\u003c/p\u003e\n\u003cp\u003e阿公还是笑，说：“那个饼你们可能能吃，这个辣条可能吃不惯。”\u003c/p\u003e\n\u003cp\u003e吃了几口，我觉得他说得很有道理。我吃过的凉皮或者是牛筋面，要放黄瓜、花生和豆芽菜，然后淋上料汁、醋和辣椒油，酸辣可口。眼下这碗辣条，只有辣椒面和面条，辣条并不呛人，但是咸得发慌；前面几口的口味还很新奇，越吃越觉得味道单调。\u003c/p\u003e\n\u003cp\u003e我还是把辣条吃完了，为的是给咱们浙江人争气，表示我们能广泛地接受不同的美食。\u003c/p\u003e\n\u003cp\u003e附上我到西安第一天的食谱：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e8:00 香蕉片、蛋糕、酸奶\u003c/li\u003e\n\u003cli\u003e11:00 牛筋面（辣条）、韭菜粉丝饼\u003c/li\u003e\n\u003cli\u003e13:30 五香肘子肉夹馍（肥瘦相间）\u003c/li\u003e\n\u003cli\u003e18:00 棍棍面（加油泼辣子）\u003c/li\u003e\n\u003cli\u003e18:30 健胃消食片\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"比赛\"\u003e比赛\u003c/h2\u003e\n\u003cp\u003e这里本来应该有一段流水账，记录我们比赛的过程。但是我不愿再回忆这场悲伤的比赛，所以这里只有一个十分简略的小结：\u003c/p\u003e\n\u003cp\u003e比赛的前期，因为我读错题目，并且头脑不清醒，在一道签到题上浪费了大量时间，并且贡献了 5 发罚时。\u003c/p\u003e\n\u003cp\u003e比赛的中期，得益于队友的稳定发挥，我们解题进度整体上中规中矩。封榜后，我继续顽强拼搏，构造了一道题的关键 hack 数据，并提出了修正方法，成功拿下一题。\u003c/p\u003e\n\u003cp\u003e比赛结束后，我们一度以为自己拿到了银牌，但是最终，我们只拿到了一块铜牌，并且是充满遗憾的一块铜牌：我们是铜牌的第一名。\u003c/p\u003e\n\u003cp\u003e也许我第一遍能读对题目，也许我能更早地构造hack 数据，也许……也许我应该更勇敢地面对自己的失败。\u003c/p\u003e\n\u003chr\u003e\n\u003cblockquote\u003e\n\u003cp\u003e失败从来是人生常态，我会划着断桨，再次出发\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e这是我离开西北工业大学之后，发在朋友圈的一句话。断桨这个意象一定是我从什么地方挪用的，但我已经不到出处了。\u003c/p\u003e\n\u003cp\u003e我不想在博客里进行严谨的考据学研究，总而言之，我会划着断桨，再次出发的。\u003c/p\u003e\n\u003ch2 id=\"大学生的第-12-周\"\u003e大学生的第 12 周\u003c/h2\u003e\n\u003cp\u003e我正在酒店房间里，坐在笔记本电脑前写这篇博客。\u003c/p\u003e\n\u003cp\u003e就在刚刚，我的算法分析与设计老师发来了明天上机的任务书。明早的课我已经和她请假了，我们订的是明天最早的飞机票，但是还是赶不上那节课。所以，我要在课外的时间去完成这次上机实验了。\u003c/p\u003e\n\u003cp\u003e打开超星学习通，一小时后，数字电路的作业就要截止了，我还没有开始做。实际上，我已经拖欠了好几次作业了\u0026mdash;\u0026mdash;自从我发现，数电作业截止后还能正常提交，我就几乎没有按时交过了。\u003c/p\u003e\n\u003cp\u003e周三，截止提交计算方法及实现的一份报告。周四之前，要完成计算机组成原理的课程设计，要编写很折磨人的二进制机器指令。此外，还有计组、数据库、数字电路还有思政课的分组任务，我现在仅仅只是组了队，进度为 0%。当然，还有数字电路的课程设计、计算方法的期末论文、自动控制原理的课程报告……这些都要在接下来的一个月有条不紊地完成。\u003c/p\u003e","title":"大学生的第 12 周"},{"content":"项目背景 这是加入某校网络安全实验室后，我做的第一个小工作，和工业互联网的网络异常检测有关。我和另一位网络工程专业的大二本科生一同参与了这个项目，通过线上会议的形式和老师进行交流。\n我们的主要任务是复现相关论文的检测方法，作为论文的 baseline 之一。\n具体复现的论文是 NDSS 2019 的一篇论文：《A Systematic Framework to Generate Invariants for Anomaly Detection in Industrial Control Systems》\n这篇论文提出了一种基于数据驱动的方法，用于生成工业控制系统的不变量，以检测异常的网络状态。论文已经有官方实现：github.com/cfeng783/NDSS19_InvariantRuleAD\n我们的任务是复现这个方法，并在指定格式的数据集和指定的实验设置下进行测试（和清华大学团队已经实现过的 baseline 保持一致）。\n主要问题 代码运行效率低下 在我们着手开始复现这个项目之前，团队应该已经有人简单地在数据集上尝试了官方实现，但是因为效率问题没有得到较好的结果，所以这个工作落到了我们手里。\n老师在实验开始之前就提醒我们，官方实现在我们指定的数据集和实验设置上效率不佳，挖掘规则所花费的时间太久。我们需要尝试提高代码的运行效率，比如查找 CFP-growth++ 算法的高效实现方式，或者分布式算法；如果没有，考虑调整参数，或者限制搜索树高度和搜索空间的大小等。\n不过，这最后被发现是一个简单的数据类型问题，而不是算法本身的效率问题，这一点之后会提到。\n代码逻辑不适配所需的实验设置 官方实现的逻辑如下：\n输入单个训练集和单个测试集 按照训练集的数据特征进行一定的变换，并将这些变换同步到测试集上 在训练集上挖掘规则集 在测试集上评估规则的有效性 我们的实验要求划分十个训练集和大量的不同变化后的测试集，每个训练集挖掘规则后，需要在所有的测试集上分别评估规则的有效性。\n如果按照原逻辑，我们需要循环运行成百上千次代码，对单个训练集进行大量的、重复的规则挖掘。在单次规则挖掘需要花费数小时的情况下，这样的效率是难以忍受的。\n详细情况与解决方案 运行效率：数据类型问题 这是整个复现过程中最关键的问题，它解决起来并不麻烦，但是我们花费了很长时间才发现问题的存在。\n我们在本地使用 csv 格式的 SWaT 和 WADI 数据集，可以复现论文结果。在 WADI 数据集上规则挖掘效率大约在三到五小时一个训练集，这个时间是可以接受的，并没有发现清华老师提到的效率问题；但是当我们使用服务器上的清华团队提供的数据集时，效率问题就出现了。\n清华团队提供的同样是 SWaT 和 WADI 数据集，是用 numpy 的 npy 格式存储的。按照老师的说明，只是对原数据集进行了一些简单的切片，并没有更改数据原始值。但是我们发现，使用这些数据集，规则挖掘的效率会大幅下降，一个训练集的挖掘会长达十几个小时——事实上时间只会更长，因为我们并没有等待规则挖掘结束，而是手动终止了实验。\n这完全不符合我们的预期，因为无论是 csv 还是 npy 格式，都是读入之后转为 pandas 的 DataFrame 进行处理，不应该产生效率上的差别。\n经过一段时间的调试，我发现问题出在数据的类型上。\n在原始的数据集上，WADI 中有一些特征是离散的执行器状态，一些是连续的传感器数据。在 csv 格式的原始数据集中，这些特征就表现为数据的类型：离散特征是 int 类型，连续特征是 float 类型。而在经过处理后的 npy 格式的数据集中，所有的特征都被标示为 float 类型，即使它本身是一个离散的执行器状态。\n在挖掘规则时，代码正是根据特征的类型来判断特征是连续的还是离散的，决定采用什么样的方法来处理这个特征：\n1 2 3 4 5 6 7 for entry in training_data: if training_data[entry].dtypes == np.float64: max_value = training_data[entry].max() min_value = training_data[entry].min() if max_value != min_value: training_data[str(entry) + \u0026#39;_update\u0026#39;] = training_data[entry].shift(-1) - training_data[entry] cont_vars.append(str(entry) + \u0026#39;_update\u0026#39;) 这段代码会将连续特征转换为差分特征，加入到 cont_vars 中。后续将会对 cont_vars 中的特征进行高斯聚类，然后进行规则挖掘。\n数据类型的错误，导致了代码将所有的特征都识别为连续特征，加入了大量的 cont_vars，挖掘规则时的计算量大幅增加。\n定位出问题之后，解决的方法很简单。我写了一个简单的脚本，在原数据集上记录所有离散特征列，然后存储为 WADI_categorical_column 和 SWaT_categorical_column 两个文件，挖掘规则前读取对应文件，将其中的特征转换为 int64 类型即可。\n1 2 3 4 5 6 7 8 9 10 if flag == \u0026#39;1\u0026#39;: categorical_column = pickle.load(open(\u0026#34;./WADI_categorical_column\u0026#34;, \u0026#34;rb\u0026#34;)) else: categorical_column = pickle.load(open(\u0026#34;./SWaT_categorical_column\u0026#34;, \u0026#34;rb\u0026#34;)) \u0026#39;fix type issue\u0026#39; for entry in training_data: if entry in categorical_column: training_data[entry] = training_data[entry].astype(\u0026#39;int64\u0026#39;) 逻辑不适配：引入中间结果，使用并行加速 中间结果 官方实现的代码逻辑中，测试集需要按照训练集的特征进行一定的变换才能进行检验。这个过程发生在规则挖掘之前，这使得单次规则挖掘只能对一个测试集进行评估。\n注意到，这里的影响是单向的，即训练集的特征会影响测试集需要进行的变换；但测试集的特征不影响训练集挖掘规则。基于这个观察，我们可以引入中间结果保存所需的变换，将训练集的挖掘规则和测试集的变换逻辑分开。这样可以避免大量的重复训练，并为评估规则的并行加速提供了可能性。\n思路简单清晰，但是实现起来并不十分容易，原代码中进行了大量的数据处理，包括高斯聚类生成的模型，这些结果都需要在训练集和测试集之间传递。\n我对代码进行逐行的检查和修改，将原代码中的数据处理逻辑分离出来，使得多个测试集可以共享这些数据处理的结果。最终，单个训练集产生的中间变量文件和规则文件总和多达十余个。\n并行加速 在分离规则挖掘和规则评估后，我们只需要进行十次规则挖掘，然后对所有的测试集进行评估即可。我写了一个简单的 shell 脚本，使这两个过程都可以并行进行。\n不过，后续发现，由于服务器资源有限，无法对所有规则同时进行评估。否则，因为同时创建了太多线程，CPU 占用会达到惊人的 99%，导致服务器上其他老师的实验无法正常进行。\n所以，最后我放弃了一键式训练 + 评估的 shell 脚本，转而编写了一个仅并行训练的脚本，评估脚本则是一次运行一组测试集，根据当前的 CPU 负载情况手动进行调度——也许技术力更强些，可以编写一个自动调度的脚本。不过当前的脚本能 work，并且项目也不需要长期维护，我就没有继续深入研究。\n总结 这是我第一次参与科研项目，解决的问题也比较简单。不过，我认为自己至少有以下三点收获。\n旧技术的运用 在这个项目中，我实际用到了一些之前学过的技术或者积累的经验。\n使用 ssh 登录服务器，并用 VScode 的 Remote-ssh 在 Linux 服务器上编写代码；使用一些简单的命令行工具在服务器上进行操作，比如 htop 监控 CPU 占用、nohup 创建后台进程以及 shell 脚本的编写和运行等；当然，还有天天熬夜打算法竞赛积累的一些 debug 经验和代码能力，这使我能比较快速地理解代码逻辑，定位到数据类型的问题。\n我对 github copilot 的 prompt 技术更是有了更深的理解。如何合理地 prompt，如何利用 copilot 完成简单的代码编写，这些确实是提高效率的关键技能。\n实际用到自己曾经学习过的技术是一种很好的体验。只有看到这些技术在实际项目中发挥作用，才能理解它们的价值所在。\n新技术的学习 此前，我并没有接触过 python。在这个项目中，我学习了一些 python 的基础语法，了解了一些 pandas 和 numpy 的基本操作。最重要的是了解了 python 的包管理工具 pip 和虚拟环境 venv，搭建一个独立的 python 环境对我来说不再是难事。\n分离代码逻辑，使用 shell 脚本进行并行加速，这是我第一次接触和使用这种技术。我认为这是很有代表性的优化方法，简单并且有效，完全可以推广到其他项目中。\n信心的建立 独立完成一项最开始看来十分艰巨的任务，使我对自己的能力有了更多的信心。\n我现在明白，计算机领域的科研工作并不是遥不可及的。这里并没有什么魔法，无非是更高级的算法和尚未接触的工具罢了，只要有充足的时间和信心，我认为自己可以解决大多数问题。从一些简单的事情出发，逐渐积累经验，我也可以做出一些有意义的工作。\n代码的可维护性 这是一个短期的项目，我们只需要得到结果，然后代码就可以丢弃了。我并没有花费太多的时间在代码的可维护性上。\n但是，就是在这么短的项目周期里，混乱的代码还是让我吃到了苦头。\n我在最开始的代码中大量使用硬编码的路径，固定了数据集的路径、中间结果的路径等等。这导致我在后期需要调整实验设置时痛苦万分，常常出现更改一个设置，就需要更改一大堆路径的情况。\n其次是参数的设置混乱，我在所有的脚本中都使用了最基础的参数读入方式，在 shell 脚本中没有使用 getopts，python 脚本中没有使用 argparse，每次调整参数时，都需要打开对应的脚本，一个一个找到参数的位置，确定含义然后修改。\n期间，还因为这个问题导致了一次错误的实验结果。应该评估一个训练集的规则集在所有测试集上的效果，但是因为参数写反了，评估了所有训练集的规则集在一个测试集上的效果。\n项目再小，也要保证最基本的代码质量。这是我在这个项目中的一个教训。\n","permalink":"http://localhost:1313/post/2024/4/nids/","summary":"对一篇工业控制系统网络异常检测的论文进行复现，解决了代码效率问题","title":"Invariant Rule Baseline 复现"}]